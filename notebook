{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Safari Challenge**\n",
        "\n",
        "In this Assignment, you are asked to use what you've learned so far to train both ANN and convolutional neural network (CNN) models that classify images of animals on a safari adventure.\n",
        "\n",
        "Data is given to you. Please Use it."
      ],
      "metadata": {
        "id": "_vkbTanlIXzm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explore the data**\n",
        "\n",
        "The training images you must use are in the /safari/training folder. \n",
        "Save the dataset locally and read it with os.listdir. Then show some samples from both training and test sets."
      ],
      "metadata": {
        "id": "0v6bs_wIIk_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# your code here"
      ],
      "metadata": {
        "id": "RDtSjPbtI1Zk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that you've ploted some of the images, so use your preferred framework (PyTorch or TensorFlow) to train both ANN and CNN classifiers for them. Your goal is to train a classifier with a validation accuracy of 95% or higher."
      ],
      "metadata": {
        "id": "7VrSv0_EJWc3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ANN Model"
      ],
      "metadata": {
        "id": "2ySPZ25uKuT8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# you code here"
      ],
      "metadata": {
        "id": "2UhsDmlrKwVy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# CNN Model"
      ],
      "metadata": {
        "id": "jZ93_PkjKdyl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Build CNN model**\n",
        "\n",
        "We will use a Sequential model.\n",
        "\n",
        "####\tThe Sequential model is a linear stack of layers. It can be first initialized and then we add layers using add method or we can add all layers at initialization stage. The layers added are as follows:\n",
        "\n",
        "\n",
        "####\tConv2D is a 2D Convolutional layer (i.e. spatial convolution over images)\n",
        ". The parameters used are:\n",
        "*\tfilters - the number of filters (Kernels) used with this layer; here filters = 32;\n",
        "*\tkernel_size - the dimmension of the Kernel: (6 x 6);\n",
        "*\tactivation - is the activation function used, in this case relu;\n",
        "*\tkernel_initializer - the function used for initializing the kernel;\n",
        "*\tinput_shape - is the shape of the image presented to the CNN\n",
        "\n",
        "#### MaxPooling2D is a Max pooling operation for spatial data. Parameters used here are:\n",
        "*\tpool_size, in this case (2,2), representing the factors by which to downscale in both directions;\n",
        "\n",
        "#### Conv2D with the following parameters:\n",
        "*\tfilters: 32;\n",
        "*\tkernel_size : (6 x 6);\n",
        "*\tactivation : relu;\n",
        "\n",
        "#### MaxPooling2D with parameter:\n",
        "*\tpool_size : (2,2);\n",
        "\n",
        "#### Conv2D with the following parameters:\n",
        "*\tfilters: 128;\n",
        "*\tkernel_size : (3 x 3);\n",
        "*\tactivation : relu;\n",
        "\n",
        "#### Conv2D with the following parameters:\n",
        "*\tfilters: 32;\n",
        "*\tkernel_size : (6 x 6);\n",
        "*\tactivation : relu;\n",
        "\n",
        "####\tMaxPooling2D with parameter:\n",
        "*\tpool_size : (2,2);\n",
        "\n",
        "####\tFlatten. This layer Flattens the input. Does not affect the batch size. It is used without parameters;\n",
        "\n",
        "####\tDense. This is the final layer (fully connected). It is used with the parameters:\n",
        "*\tunits: the number of classes\n",
        "*\tactivation : softmax; for this final layer it is used softmax activation (standard for multiclass classification)\n",
        "\n",
        "\n",
        "Then we compile the model, specifying as well the following parameters:\n",
        "\n",
        "*\tloss;\n",
        "*\toptimizer;\n",
        "*\tmetrics.\n",
        "\n"
      ],
      "metadata": {
        "id": "2VddxoeYE-vH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import libraries here and define CNN"
      ],
      "metadata": {
        "id": "b3TAgOy-JgQi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train your model"
      ],
      "metadata": {
        "id": "MY2gqh1JJw3K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the loss history of both training and validation (Model Accuracu and Model loss)"
      ],
      "metadata": {
        "id": "PV4jeDxqJ1Qm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate model performance"
      ],
      "metadata": {
        "id": "cfgO0c5dJ7RX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "KxZdElARJslD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# save your model"
      ],
      "metadata": {
        "id": "KlAbVuV5KNTT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the trained model"
      ],
      "metadata": {
        "id": "fvVGL08HKO7X"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
